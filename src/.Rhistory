par_set = makeParamSet(
makeDiscreteParam(id = "model", values = c("sGARCH")),
makeIntegerVectorParam(id = "garchOrder", len = 2L, lower = 1, upper = 3)
)
library(mlr)
par_set = makeParamSet(
makeDiscreteParam(id = "model", values = c("sGARCH")),
makeIntegerVectorParam(id = "garchOrder", len = 2L, lower = 1, upper = 3)
)
ctrl = makeTuneControlIrace(maxExperiments = 10L)
dat = arima.sim(model = list(ar = c(.5,.2), ma = c(.4), order = c(2,0,1)), n = 200)
times = (as.POSIXlt("1992-01-14")) + lubridate::days(1:200)
dat = xts::xts(dat,order.by = times)
colnames(dat) = c("arma_test")
dat.train = dat[1:190,]
dat.test = dat[191:200,]
library(mlr)
fcregr.task = makeForecastRegrTask(id = "test", data = dat.train, target = "arma_test",
frequency = 7L)
fcregr.task
data("EuStockMarkets")
EuStockMarkets.time = lubridate::date_decimal(as.numeric(time(EuStockMarkets)))
EuStockMarkets  = xts::xts(as.data.frame(EuStockMarkets), order.by = EuStockMarkets.time)
EuStockMarkets.train = EuStockMarkets[1:1850,]
EuStockMarets.test = EuStockMarkets[1851:1860,]
mfcregr.task = makeMultiForecastRegrTask(id = "bigvar", data = EuStockMarkets.train, target = "all", frequency = 7L)
mfcregr.task
mfcregr.task = makeMultiForecastRegrTask(id = "bigvar", data = EuStockMarkets.train, target = "DAX", frequency = 7L)
mfcregr.task
getLearnerParamSet("fcregr.garch")
garch.mod = makeLearner("fcregr.garch",
model = "sGARCH", garchOrder = c(2,1),
n.ahead = 10L, include.mean = FALSE)
garch.mod
garch.train = train(garch.mod, fcregr.task)
garch.pred = predict(garch.train, newdata = dat.test)
performance(garch.pred, measure = mase, task = fcregr.task)
resamp.desc = makeResampleDesc("GrowingCV", horizon = 10L,
initial.window = .90,
size = nrow(getTaskData(fcregr.task)), skip = 0)
resamp.desc
resamp.desc = makeResampleDesc("GrowingCV", horizon = 10L,
initial.window = .90,
size = nrow(getTaskData(fcregr.task)), skip = 0.1)
resamp.desc
resamp.desc = makeResampleDesc("GrowingCV", horizon = 10L,
initial.window = .90,
size = nrow(getTaskData(fcregr.task)), skip = 0.05)
resamp.desc
garch.resample = resample(learner = garch.mod, task = fcregr.task,
resampling = resamp.desc, measures = mase)
garch.resample
par_set = makeParamSet(
makeDiscreteParam(id = "model", values = c("sGARCH")),
makeIntegerVectorParam(id = "garchOrder", len = 2L, lower = 1, upper = 3)
)
ctrl = makeTuneControlIrace(maxExperiments = 10L)
configureMlr(on.learner.error = "warn")
res = tuneParams(garch.mod, task = fcregr.task,
resampling = resamp.desc, par.set = par_set,
control = ctrl, measures = mase)
ctrl = makeTuneControlIrace(maxExperiments = 96L)
configureMlr(on.learner.error = "warn")
res = tuneParams(garch.mod, task = fcregr.task,
resampling = resamp.desc, par.set = par_set,
control = ctrl, measures = mase)
res
fcregr.task = makeForecastRegrTask(id = "test", data = dat.train,
target = "arma_test", frequency = 7L)
arm = makeLearner("fcregr.Arima", order = c(2L,0L,1L),
h = 10L, include.mean = FALSE)
arm
armMod = train(arm, fcregr.task)
updateArmMod = updateModel(armMod, fcregr.task, newdata = dat.test)
updateArmMod
predict(updateArmMod, task = fcregr.task)
dat.train.reg = as.data.frame(dat.train, row.names = index(dat.train))
EuStockMarkets.train = EuStockMarkets[1:1855,]
EuStockMarkets.test = EuStockMarkets[1856:1860,]
multfore.task = makeMultiForecastRegrTask(id = "bigvar", data = EuStockMarkets.train, target = "FTSE")
resamp.sub = makeResampleDesc("GrowingCV",
horizon = 5L,
initial.window = .97,
size = nrow(getTaskData(multfore.task)),
skip = .01
)
lrns = list(makeLearner("mfcregr.BigVar", par.vals = list(p = 2, struct = "Basic", gran = c(5,5), h = 5, n.ahead = 5 )))
lrns = list(makeLearner("mfcregr.BigVAR", par.vals = list(p = 2, struct = "Basic", gran = c(5,5), h = 5, n.ahead = 5 )))
stack.forecast = makeStackedLearner(base.learners = lrns,
predict.type = "response",
super.learner = makeLearner("regr.earth", penalty = 2),
method = "growing.cv",
resampling = resamp.sub)
ps = makeParamSet(
makeDiscreteParam("mfcregr.BigVAR.p", values = 5),
makeDiscreteParam("mfcregr.BigVAR.struct", values = "Basic"),
makeNumericVectorParam("mfcregr.BigVAR.gran", len = 2L, lower = 25, upper = 26),
makeDiscreteParam("mfcregr.BigVAR.h", values = 5),
makeDiscreteParam("mfcregr.BigVAR.n.ahead", values = 5)
)
EuStockMarkets.train = EuStockMarkets[1:1855,]
EuStockMarkets.test = EuStockMarkets[1856:1860,]
multfore.task = makeMultiForecastRegrTask(id = "bigvar", data = EuStockMarkets.train, target = "FTSE")
resamp.sub = makeResampleDesc("GrowingCV",
horizon = 5L,
initial.window = .97,
size = nrow(getTaskData(multfore.task)),
skip = .01
)
lrns = list(makeLearner("mfcregr.BigVAR", par.vals = list(p = 2, struct = "Basic", gran = c(5,5), h = 5, n.ahead = 5 )))
stack.forecast = makeStackedLearner(base.learners = lrns,
predict.type = "response",
super.learner = makeLearner("regr.earth", penalty = 2),
method = "growing.cv",
resampling = resamp.sub)
ps = makeParamSet(
makeDiscreteParam("mfcregr.BigVAR.p", values = 5),
makeDiscreteParam("mfcregr.BigVAR.struct", values = "Basic"),
makeNumericVectorParam("mfcregr.BigVAR.gran", len = 2L, lower = 25, upper = 26),
makeDiscreteParam("mfcregr.BigVAR.h", values = 5),
makeDiscreteParam("mfcregr.BigVAR.n.ahead", values = 5)
)
multfore.tune = tuneParams(stack.forecast, multfore.task, resampling = resamp.sub,
par.set = ps, control = makeTuneControlGrid(),
measures = multivar.mase, show.info = FALSE)
ps = makeParamSet(
makeDiscreteParam("mfcregr.BigVAR.p", values = 1),
makeDiscreteParam("mfcregr.BigVAR.struct", values = "Basic"),
makeNumericVectorParam("mfcregr.BigVAR.gran", len = 2L, lower = 5, upper = 5),
makeDiscreteParam("mfcregr.BigVAR.h", values = 5),
makeDiscreteParam("mfcregr.BigVAR.n.ahead", values = 5)
)
multfore.tune = tuneParams(stack.forecast, multfore.task, resampling = resamp.sub,
par.set = ps, control = makeTuneControlGrid(),
measures = multivar.mase, show.info = FALSE)
resamp.sub
lrns = list(makeLearner("mfcregr.BigVAR",
par.vals = list(p = 2, struct = "Basic",
gran = c(5,5), h = 5, n.ahead = 5 )))
multfore.tune = tuneParams(stack.forecast, multfore.task, resampling = resamp.sub,
par.set = ps, control = makeTuneControlGrid(),
measures = multivar.mase, show.info = FALSE)
multfore.tune
stack.forecast.f  = setHyperPars2(stack.forecast,multfore.tune$x)
multfore.train = train(stack.forecast.f,multfore.task)
multfore.train
multfore.pred = predict(multfore.train, newdata = EuStockMarkets.test)
multfore.pred
performance(multfore.pred, mase, task = multfore.task)
set.seed(1234)
dat = arima.sim(model = list(ar = c(.5,.2), ma = c(.4), order = c(2,0,1)), n = 200)
times = (as.POSIXlt("1992-01-14")) + lubridate::days(1:200)
dat = xts::xts(dat,order.by = times)
colnames(dat) = c("arma_test")
dat.train = dat[1:190,]
dat.test = dat[191:200,]
library(mlr)
fcregr.task = makeForecastRegrTask(id = "test", data = dat.train, target = "arma_test",
frequency = 7L)
fcregr.task
data("EuStockMarkets")
EuStockMarkets.time = lubridate::date_decimal(as.numeric(time(EuStockMarkets)))
EuStockMarkets  = xts::xts(as.data.frame(EuStockMarkets), order.by = EuStockMarkets.time)
EuStockMarkets.train = EuStockMarkets[1:1850,]
EuStockMarets.test = EuStockMarkets[1851:1860,]
mfcregr.task = makeMultiForecastRegrTask(id = "bigvar", data = EuStockMarkets.train, target = "all", frequency = 7L)
mfcregr.task
mfcregr.task = makeMultiForecastRegrTask(id = "bigvar", data = EuStockMarkets.train, target = "DAX", frequency = 7L)
mfcregr.task
getLearnerParamSet("fcregr.garch")
garch.mod = makeLearner("fcregr.garch",
model = "sGARCH", garchOrder = c(2,1),
n.ahead = 10L, include.mean = FALSE)
garch.mod
garch.train = train(garch.mod, fcregr.task)
garch.pred = predict(garch.train, newdata = dat.test)
performance(garch.pred, measure = mase, task = fcregr.task)
resamp.desc = makeResampleDesc("GrowingCV", horizon = 10L,
initial.window = .90,
size = nrow(getTaskData(fcregr.task)), skip = 0.05)
resamp.desc
garch.resample = resample(learner = garch.mod, task = fcregr.task,
resampling = resamp.desc, measures = mase)
garch.resample
par_set = makeParamSet(
makeDiscreteParam(id = "model", values = c("sGARCH")),
makeIntegerVectorParam(id = "garchOrder", len = 2L, lower = 1, upper = 3)
)
ctrl = makeTuneControlIrace(maxExperiments = 96L)
configureMlr(on.learner.error = "warn")
res = tuneParams(garch.mod, task = fcregr.task,
resampling = resamp.desc, par.set = par_set,
control = ctrl, measures = mase)
res
garch.hyp  = setHyperPars(makeLearner("fcregr.garch", n.ahead = 10L),
par.vals = res$x)
garch.best = train(garch.hyp, fcregr.task)
garch.pred = predict(garch.best, newdata = dat.test)
performance(garch.pred, measures = mase, task = fcregr.task)
fcregr.task = makeForecastRegrTask(id = "test", data = dat.train,
target = "arma_test", frequency = 7L)
arm = makeLearner("fcregr.Arima", order = c(2L,0L,1L),
h = 10L, include.mean = FALSE)
arm
armMod = train(arm, fcregr.task)
updateArmMod = updateModel(armMod, fcregr.task, newdata = dat.test)
updateArmMod
predict(updateArmMod, task = fcregr.task)
EuStockMarkets.train = EuStockMarkets[1:1855,]
EuStockMarkets.test = EuStockMarkets[1856:1860,]
multfore.task = makeMultiForecastRegrTask(id = "bigvar", data = EuStockMarkets.train, target = "FTSE")
?as.xts
?xts
performance(multfore.pred, mase, task = multfore.task)
EuStockMarkets.test
multfore.pred = predict(multfore.train, newdata = EuStockMarkets.test)
multfore.pred
performance(multfore.pred, mase, task = multfore.task)
EuStockMarkets.test
as.data.frame(EuStockMarkets.test)
resamp.sub
resamp.sub = makeResampleDesc("GrowingCV",
horizon = 5L,
initial.window = .97,
size = nrow(getTaskData(multfore.task)),
skip = .011
)
resamp.sub
resamp.sub = makeResampleDesc("GrowingCV",
horizon = 5L,
initial.window = .97,
size = nrow(getTaskData(multfore.task)),
skip = .015
)
resamp.sub
?makeTuneControlGrid
multfore.tune = tuneParams(stack.forecast, multfore.task, resampling = resamp.sub,
par.set = ps, control = makeTuneControlGrid(resolution = 1L),
measures = multivar.mase, show.info = FALSE)
lrns = list(makeLearner("mfcregr.BigVAR"), p = 5, struct = "Basic", h = 5, n.ahead = 5)
stack.forecast = makeStackedLearner(base.learners = lrns,
predict.type = "response",
super.learner = makeLearner("regr.earth", penalty = 2),
method = "growing.cv",
resampling = resamp.sub)
lrns = list(makeLearner("mfcregr.BigVAR"), p = 5, struct = "Basic", h = 5, n.ahead = 5)
stack.forecast = makeStackedLearner(base.learners = lrns,
predict.type = "response",
super.learner = makeLearner("regr.earth", penalty = 2),
method = "growing.cv",
resampling = resamp.sub)
lrns = list(makeLearner("mfcregr.BigVAR",p = 5, struct = "Basic", h = 5, n.ahead = 5))
stack.forecast = makeStackedLearner(base.learners = lrns,
predict.type = "response",
super.learner = makeLearner("regr.earth", penalty = 2),
method = "growing.cv",
resampling = resamp.sub)
ps = makeParamSet(
makeNumericVectorParam("mfcregr.BigVAR.gran", len = 2L, lower = 5, upper = 6),
)
ps = makeParamSet(
makeNumericVectorParam("mfcregr.BigVAR.gran", len = 2L, lower = 5, upper = 6)
)
multfore.tune = tuneParams(stack.forecast, multfore.task, resampling = resamp.sub,
par.set = ps, control = makeTuneControlGrid(resolution = 1L),
measures = multivar.mase, show.info = FALSE)
data("Nile")
?Nile
length(Nile)
data("EuStockMarkets")
data("EuStockMarkets")
EuStockMarets.test
?makeResampleDesc
garch.train = train(garch.mod, fcregr.task)
garch.pred = predict(garch.train, newdata = EuStockMarkets.test)
performance(garch.pred, measure = mase, task = fcregr.task)
garch.pred
EuStockMarkets.test
garch.train
garch.pred = predict(garch.train, newdata = EuStockMarkets.test)
garch.pred
getLearnerParamSet("fcregr.garch")
garch.mod = makeLearner("fcregr.garch",
model = "sGARCH", garchOrder = c(2,1),
n.ahead = 5L, include.mean = FALSE)
garch.mod
garch.train = train(garch.mod, fcregr.task)
garch.pred = predict(garch.train, newdata = EuStockMarkets.test)
performance(garch.pred, measure = mase, task = fcregr.task)
EuStockMarkets.test
garch.pred
garch.pred = predict(garch.train)#, newdata = EuStockMarkets.test)
garch.pred = predict(garch.train,task = fcregr.task)# newdata = EuStockMarkets.test)
garch.pred
class(EuStockMarkets.test)
predict
garch.pred = predict(garch.train, newdata = as.data.frame(EuStockMarkets.test))
performance(garch.pred, measure = mase, task = fcregr.task)
colnames(EuStockMarkets.test)
fcregr.task
predict.wrappedModel
library(mlr)
?predictLearner
garch.pred = predict(garch.train, newdata = EuStockMarkets.test)
garch.pred
EuStockMarkets.test
garch.pred = predict(garch.train, newdata = EuStockMarkets.test[,1])
garch.pred
garch.pred = predict(garch.train, newdata = EuStockMarkets.test[,1, drop = FALSE])
performance(garch.pred, measure = mase, task = fcregr.task)
garch.pred = predict(garch.train, newdata = as.data.frame(EuStockMarkets.test)
)
garch.pred
garch.pred = predict(garch.train, newdata = EuStockMarkets.test)
data
truth
garch.pred = predict(garch.train, newdata = EuStockMarkets.test)
garch.pred = predict(garch.train, newdata = EuStockMarkets.test)
garch.pred = predict(garch.train, newdata = EuStockMarkets.test)
class(garch.train)
class(garch.train)
garch.pred = predict(garch.train, newdata = EuStockMarkets.test)
predict(garch.train, newdata = EuStockMarkets.test)
predict(garch.train, newdata = EuStockMarkets.test[,1])
predict(garch.train, newdata = EuStockMarkets.test[,1:2])
predict(garch.train, newdata = EuStockMarkets.test[1,1:2])
EuStockMarkets.test
