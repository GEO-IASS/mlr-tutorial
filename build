#!/usr/bin/env Rscript

# config #######################################################################
src = "src"
dest = "docs"

# macros to link to docs:
# - [NAME](&PACKAGE::FUNCTION)
# - [NAME](&FUNCTION) (mlr documentation)
# - [&PACKAGE::FUNCTION]
# - [&FUNCTION] (mlr documentation)
# - [NAME](%PACKAGE)
# - [%PACKAGE]
macros = list(
  list(pattern = "\\[(.+?)\\]\\(&([A-Za-z0-9.]+?)::([A-Za-z0-9.-_]+)\\)", replacement = "[\\1](http://www.rdocumentation.org/packages/\\2/functions/\\3.html)"),
  list(pattern = "\\[(.+?)\\]\\(&([A-Za-z0-9.-]+?)\\)", replacement = "[\\1](http://www.rdocumentation.org/packages/mlr/functions/\\2.html)"),
  list(pattern = "\\[&([A-Za-z0-9.]+?)::([A-Za-z0-9.-_]+?)\\]", replacement = "[\\1::\\2](http://www.rdocumentation.org/packages/\\1/functions/\\2.html)"),
  list(pattern = "\\[&([A-Za-z0-9.-]+?)\\]", replacement = "[\\1](http://www.rdocumentation.org/packages/mlr/functions/\\1.html)"),
  list(pattern = "\\[(.+?)\\]\\(%([A-Za-z0-9.-]+?)\\)", replacement = "[\\1](http://www.rdocumentation.org/packages/\\2/)"),
  list(pattern = "\\[%([A-Za-z0-9.-]+?)\\]", replacement = "[\\1](http://www.rdocumentation.org/packages/\\1/)")
)

# helper functions #############################################################
# generate useful exit status
exit = function(status, msg, ...) {
  if (!missing(msg))
    cat(sprintf(msg, ...), "\n\n", sep = "")
  quit(save = "no", status = status)
}

# set seed depending on file name
setSeed = function(x, algo = "crc32") {
 hash = digest(x, algo = algo)
 set.seed(strtoi(sprintf("0x%s", substr(hash, 1L, 7L))))
}

# worker function
knitIt = function(f) {
  messagef("Knitting file '%s' ...", f)
  lines = readLines(file.path(src, f))
  for (macro in macros)
    lines = str_replace_all(lines, macro$pattern, macro$replacement)

  cache.path = paste0(file.path("cache", f), .Platform$file.sep)
  opts_chunk$set(cache = TRUE, cache.path = cache.path, dev = "svg", error = FALSE, comment = "#>", collapse = TRUE)
  setSeed(f)
  knit(
    text = lines,
    output = file.path(dest, str_replace(f, "\\.Rmd$", "\\.md")),
    quiet = TRUE
  )
}


# start #######################################################################
message("Loading required packages ...")
suppressPackageStartupMessages({
  # namespace conflicts
  library(glmnet)   # auc
  library(ROCR)

  # required to build
  library(methods)
  library(parallel)
  library(pander)
  library(BBmisc)
  library(knitr)
  library(stringr)
  library(digest)
  library(caret) # we get problems if this shadows "mlr::train"
  suppressWarnings(library(rgl)) # suppress "no X" warning on travis
  library(mlr)
})

# turn warnings to errors, we don't want to miss them
options(warn = 2L)
# embed images in HTML
opts_knit$set(upload.fun = image_uri)
# number of spaces to indent the code is 2 (for chunks with tidy=TRUE)
opts_chunk$set(tidy.opts=list(indent=2, width.cutoff=80))

# create output directory
if (!isDirectory("docs"))
  dir.create("docs")

# do lapply for now. with mclapply it seems unclear how to stop best on error. this was 100% broken before
dummy = lapply(list.files(src, pattern = "\\.Rmd$"), knitIt)

# build docs with mkdocs
ok = system3("mkdocs", "build")
if (ok$exit.code == 0L) {
  message("Build successfull!")
  message("Now zip everything!")
  setwd("devel/html/")
  suppressAll(zip("../mlr_tutorial.zip", files = "."))
  setwd("../")
  # clean up
  unlink("figure", recursive = TRUE)
  exit(0L)
}

messagef("Build failed!")
exit(ok$exit.code)

# vim: set ft=r:
